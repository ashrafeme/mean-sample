angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,n){t.currentUser=n})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(n,e){o.login(n,e).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostSvc",function(t,o){o.fetch().success(function(o){t.posts=o}),t.addPost=function(){t.postBody&&o.create({body:t.postBody}).success(function(o){t.postBody=null})},t.$on("ws:new_post",function(o,n){t.$apply(function(){t.posts.unshift(n)})})}]),angular.module("app").service("PostSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,o,n){t.register=function(e,r){o.register(e,r).then(function(o){t.$emit("login",o),n.path("/")})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})},o.register=function(n,e){return t.post("/api/users",{username:n,password:e}).then(function(){return o.login(n,e)})}}]),angular.module("app").run(["$rootScope","$window","$timeout",function(t,o,n){!function e(){var r;r="https:"===o.location.protocol?"wss://"+o.location.host:"ws://"+o.location.host;var s=new WebSocket(r);s.onclose=function(t){console.log("WebSocket closed,Reconnecting...."),n(e,1e4)},s.onmessage=function(o){console.log(o);var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,